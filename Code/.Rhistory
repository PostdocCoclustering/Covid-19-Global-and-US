fgjp[[i]]<- ( f.ij[i]%*%t(g.kj[k]) ) * t(hjj)
}
# similar for g
fgjp<-list()
for(i in 1:(I+1)){
fgjp[[i]]<- ( f.ij[i]%*%t(g.kj[k]) )
}
Dxy<-matrix(0,nrow=(K+1),ncol=(J+1))
for(k in 1:(K+1)){
for(j in 1:(J+1)){
Dxy[k,j]<- sum( ( fgjp[[k]][j,] / (n1+n2) )[-j] ) * hjjp
}
}
Dxy<-matrix(0,nrow=(K+1),ncol=(J+1))
for(k in 1:(K+1)){
for(j in 1:(J+1)){
Dxy[k,j]<- sum( ( fgjp[[k]][j,] / (n1+n2) )[-j] )
}
}
# To illustrate the method, we use KB data from Kolen and Brennan (2014)
# The equate library contains the KB data
data(KBneat,package="equate")
# Results can be derived either for internal or external anchor scores
# Let's assume first internal anchor scores
# Note that Liou et al paper derive formulas for coomon items that DO NOT
# count for total scores (external anchor scores). In such case, one should
# define xs<-xs-xa; ys<-ys-ya
xs<-KBneat$x[,1]
xa<-KBneat$x[,2]
ys<-KBneat$y[,1]
ya<-KBneat$y[,2]
sd(ya)
# Total number of items in forms X (I), Y (K) and A (J)
I<-36
J<-12
K<-36
#Sample sizes in populations P and Q
n1<-length(xs)
n2<-length(ys)
################
# EQUATION (9) #
################
# Synthetic weight
gamma<-n1/(n1+n2)
# Sample distribution of anchor scores (h) in P and Q
h.x<-as.vector(table(factor(xa,levels=0:J)))/n1
h.y<-as.vector(table(factor(ya,levels=0:J)))/n2
################
# EQUATION (8) #
################
# Sample distribution of anchor scores in the synthetic population
h<-gamma*h.x+(1-gamma)*h.y
plot(0:J,h)
# Sample conditional distributions f(i|j)
f.ij<-matrix(0,nrow=I+1,ncol=J+1)
for(j in 0:J){
f.ij[,j+1]<-as.vector(table(factor(KBneat$x[KBneat$x$anchor==j,][,1],levels=0:I)))/(h.x*n1)[j+1] # A table of each anchor score for each X score
}
# Sample conditional distributions g(k|j)
g.kj<-matrix(0,nrow=K+1,ncol=J+1)
for(j in 0:J){
g.kj[,j+1]<-as.vector(table(factor(KBneat$y[KBneat$y$anchor==j,][,1],levels=0:K)))/(h.y*n2)[j+1] # A table of each anchor score for each Y score
}
fi<-apply(f.ij*matrix(rep(h,nrow(f.ij)),ncol=ncol(f.ij),byrow=TRUE),1,sum)
gk<-apply(g.kj*matrix(rep(h,nrow(g.kj)),ncol=ncol(g.kj),byrow=TRUE),1,sum)
x<-0:36
mean.x <- sum(x * fi)
var.x <- sum(fi*(x - mean.x)^2)
h_x <- 0.5
a.x <- sqrt( var.x/(var.x+h_x^2) )
F.aux<-function(x){
aux <- pnorm((x - a.x * (0:I) - (1 - a.x) * mean.x) / (a.x * h_x))
aux2 <- fi * aux
return(aux2)
}
Fc.aux <- function(z) {
sum(F.aux(z))
}
Fc<-Vectorize(Fc.aux)
plot(0:36,Fc(0:36))
points(0:36,Fc(0:36))
y<-0:36
mean.y <- sum(y * gk)
var.y <- sum(gk*(y - mean.y)^2)
h_y <- 0.5
a.y <- sqrt( var.y/(var.y+h_y^2) )
G.aux<-function(y){
aux <- pnorm((y - a.y * (0:K) - (1 - a.y) * mean.y) / (a.y * h_y))
aux2 <- gk * aux
return(aux2)
}
Gc.aux <- function(z) {
sum(G.aux(z))
}
Gc<-Vectorize(Gc.aux)
plot(0:36,Gc(0:36))
Ax<-f.ij*(1-f.ij)*matrix(rep(h^2,I+1),ncol=J+1,byrow=TRUE) /
((n1+1)*matrix(rep(h.x,I+1),ncol=J+1,byrow=TRUE)-1)
Ay<-g.kj*(1-g.kj)*matrix(rep(h^2,K+1),ncol=J+1,byrow=TRUE) /
((n2+1)*matrix(rep(h.y,K+1),ncol=J+1,byrow=TRUE)-1)
#Term B
Bx<-( matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,I+1),ncol=J+1,byrow=TRUE))*(f.ij^2) ) /
(n1+n2)
By<-( matrix(rep(h,K+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,K+1),ncol=J+1,byrow=TRUE))*(g.kj^2) ) /
(n1+n2)
#Term C
Cx<-( f.ij*(1-f.ij)*matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)) ) /
( ((n1+1)*matrix(rep(h.x,I+1),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
Cy<-( g.kj*(1-g.kj)*matrix(rep(h,K+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,K+1),ncol=J+1,byrow=TRUE)) ) /
( ((n2+1)*matrix(rep(h.y,K+1),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
# The object hjj that follows is a (J+1)x(J+1) matrix which contains all crossed products
hjj<-h%*%t(h)
fjj<-list()
for(i in 1:(I+1)){
fjj[[i]]<-f.ij[i,]%*%t(f.ij[i,])
}
gjj<-list()
for(k in 1:(K+1)){
gjj[[k]]<-g.kj[k,]%*%t(g.kj[k,])
}
fjjp<-list()
for(i in 1:(I+1)){
fjjp[[i]]<- ( f.ij[i,]%*%t(f.ij[i,]) )*hjj
}
# similar for g
gjjp<-list()
for(k in 1:(K+1)){
gjjp[[k]]<- ( g.kj[k,]%*%t(g.kj[k,]) )*hjj
}
# D term for all i and j
Dx<-matrix(0,nrow=(I+1),ncol=(J+1))
for(i in 1:(I+1)){
for(j in 1:(J+1)){
Dx[i,j]<- sum( ( fjjp[[i]][j,] / (n1+n2) )[-j] )
}
}
Dy<-matrix(0,nrow=(K+1),ncol=(J+1))
for(k in 1:(K+1)){
for(j in 1:(J+1)){
Dy[k,j]<- sum( ( gjjp[[k]][j,] / (n1+n2) )[-j] )
}
}
Var.fi<-apply(Ax+Bx+Cx,1,sum)-apply(Dx,1,sum)
Var.gk<-apply(Ay+By+Cy,1,sum)-apply(Dy,1,sum)
fii<-list()
for(j in 1:(J+1)){
fii[[j]]<-f.ij[,j]%*%t(f.ij[,j])
}
gkk<-list()
for(j in 1:(J+1)){
gkk[[j]]<-g.kj[,j]%*%t(g.kj[,j])
}
# fiip contains the product of f(i|j)f(i'|j) when i!= i', for i=1,...,I+1
ndx<-((I+1)*I)/2
fiip <- matrix(0,ncol=(J+1),nrow=ndx)
for(j in 1:(J+1)){
fiip[,j] <- fii[[j]][lower.tri(fii[[j]],diag=FALSE)]
}
ndy<-((K+1)*K)/2
gkkp <- matrix(0,ncol=(J+1),nrow=ndy)
for(j in 1:(J+1)){
gkkp[,j] <- gkk[[j]][lower.tri(gkk[[j]],diag=FALSE)]
}
A2x <- ( matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndx),ncol=J+1,byrow=TRUE))*(fiip) ) /
(n1+n2)
B2x <- fiip*matrix(rep(h^2,ndx),ncol=J+1,byrow=TRUE) / ((n1+1)*matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)-1)
C2x <- ( (fiip)*matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)) ) /
( ((n1+1)*matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
A2y <- ( matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndy),ncol=J+1,byrow=TRUE))*(gkkp) ) /
(n1+n2)
B2y <- gkkp*matrix(rep(h^2,ndy),ncol=J+1,byrow=TRUE) / ((n1+1)*matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)-1)
C2y <- ( (gkkp)*matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)) ) /
( ((n1+1)*matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
# the fipjp list that follows contains (I+1)I/2 (J+1)x(J+1) matrices each containing f(i|j)f(i'|j')
fipjp<-list()
for(i in 1:ndx){
fipjp[[i]]<- ( fiip[i,]%*%t(fiip[i,]) ) * hjj
}
gkpjp<-list()
for(k in 1:ndy){
gkpjp[[k]]<- ( gkkp[k,]%*%t(gkkp[k,]) ) * hjj
}
D2x<-matrix(0,nrow=(I+1),ncol=(J+1))
for(i in 1:(I+1)){
for(j in 1:(J+1)){
D2x[i,j]<- sum( ( fipjp[[i]][j,] / (n1+n2) )[-j] )
}
}
D2y<-matrix(0,nrow=(K+1),ncol=(J+1))
for(k in 1:(K+1)){
for(j in 1:(J+1)){
D2y[k,j]<- sum( ( gkpjp[[k]][j,] / (n1+n2) )[-j] )
}
}
cov.fi<-apply(A2x-B2x-C2x,1,sum)-apply(D2x,1,sum)
cov.gk<-apply(A2y-B2y-C2y,1,sum)-apply(D2y,1,sum)
#####################
fjgjp<-list()
for(i in 1:(I+1)){
fjgjp[[i]]<- ( fjj[i,]%*%t(gjj[i,]) )*hjj
}
# fjgjp contains in its columns the product of f(i|j)g(k|j') when j!= j', for i=0,...,I+1
fjgjp<-matrix(0,ncol=(I+1),nrow=length(hjjp))
for(i in 1:(I+1)){
fjgjp[,i]<-fjj[[i]][lower.tri(gjj[[k]],diag=FALSE)]
}
hjjp
# hjjp contains the product of h(j)h(j') when j!= j'
hjjp<-hjj[lower.tri(hjj,diag=FALSE)]
#------------------------------------------------------------------------#
# fjgjp contains in its columns the product of f(i|j)g(k|j') when j!= j',
# for i=0,...,I+1
fjgjp<-matrix(0,ncol=(I+1),nrow=length(hjjp))
for(i in 1:(I+1)){
fjgjp[,i]<-fjj[[i]][lower.tri(gjj[[k]],diag=FALSE)]
}
#####################
B.cov<-c()
for(i in 1:(I+1)){
B.cov[i]<-sum((hjjp*fjgjp[,i])/(n1+n2))
}
# Covariance of F and G:
covFG <- vector()
for(i in 1:(I+1)){
for(k in 1:I+1){
covFG[i] <- sum( pnorm((x[i] - a.x*(0:I)-(1-a.x)*mean.x)/(a.x*h_x)) ) *
sum( pnorm((xi[k] - a.xi*(0:K)-(1-a.xi)*mean.xi)/(a.xi*h_y)) *
apply(Acov,1,sum) - B.cov)
}
}
plot((var.comp1X + var.comp2X) + (var.comp1xi + var.comp2xi) - 2*covFG)
# Results can be derived either for internal or external anchor scores
# Let's assume first internal anchor scores
# Note that Liou et al paper derive formulas for coomon items that DO NOT
# count for total scores (external anchor scores). In such case, one should
# define xs<-xs-xa; ys<-ys-ya
xs<-KBneat$x[,1]
xa<-KBneat$x[,2]
ys<-KBneat$y[,1]
ya<-KBneat$y[,2]
sd(ya)
# Total number of items in forms X (I), Y (K) and A (J)
I<-36
J<-12
K<-36
#Sample sizes in populations P and Q
n1<-length(xs)
n2<-length(ys)
################
# EQUATION (9) #
################
# Synthetic weight
gamma<-n1/(n1+n2)
# Sample distribution of anchor scores (h) in P and Q
h.x<-as.vector(table(factor(xa,levels=0:J)))/n1
h.y<-as.vector(table(factor(ya,levels=0:J)))/n2
################
# EQUATION (8) #
################
# Sample distribution of anchor scores in the synthetic population
h<-gamma*h.x+(1-gamma)*h.y
plot(0:J,h)
# Sample conditional distributions f(i|j)
f.ij<-matrix(0,nrow=I+1,ncol=J+1)
for(j in 0:J){
f.ij[,j+1]<-as.vector(table(factor(KBneat$x[KBneat$x$anchor==j,][,1],levels=0:I)))/(h.x*n1)[j+1] # A table of each anchor score for each X score
}
# Sample conditional distributions g(k|j)
g.kj<-matrix(0,nrow=K+1,ncol=J+1)
for(j in 0:J){
g.kj[,j+1]<-as.vector(table(factor(KBneat$y[KBneat$y$anchor==j,][,1],levels=0:K)))/(h.y*n2)[j+1] # A table of each anchor score for each Y score
}
fi<-apply(f.ij*matrix(rep(h,nrow(f.ij)),ncol=ncol(f.ij),byrow=TRUE),1,sum)
gk<-apply(g.kj*matrix(rep(h,nrow(g.kj)),ncol=ncol(g.kj),byrow=TRUE),1,sum)
x<-0:36
mean.x <- sum(x * fi)
var.x <- sum(fi*(x - mean.x)^2)
h_x <- 0.5
a.x <- sqrt( var.x/(var.x+h_x^2) )
F.aux<-function(x){
aux <- pnorm((x - a.x * (0:I) - (1 - a.x) * mean.x) / (a.x * h_x))
aux2 <- fi * aux
return(aux2)
}
Fc.aux <- function(z) {
sum(F.aux(z))
}
Fc<-Vectorize(Fc.aux)
plot(0:36,Fc(0:36))
points(0:36,Fc(0:36))
y<-0:36
mean.y <- sum(y * gk)
var.y <- sum(gk*(y - mean.y)^2)
h_y <- 0.5
a.y <- sqrt( var.y/(var.y+h_y^2) )
G.aux<-function(y){
aux <- pnorm((y - a.y * (0:K) - (1 - a.y) * mean.y) / (a.y * h_y))
aux2 <- gk * aux
return(aux2)
}
Gc.aux <- function(z) {
sum(G.aux(z))
}
Gc<-Vectorize(Gc.aux)
plot(0:36,Gc(0:36))
Ax<-f.ij*(1-f.ij)*matrix(rep(h^2,I+1),ncol=J+1,byrow=TRUE) /
((n1+1)*matrix(rep(h.x,I+1),ncol=J+1,byrow=TRUE)-1)
Ay<-g.kj*(1-g.kj)*matrix(rep(h^2,K+1),ncol=J+1,byrow=TRUE) /
((n2+1)*matrix(rep(h.y,K+1),ncol=J+1,byrow=TRUE)-1)
#Term B
Bx<-( matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,I+1),ncol=J+1,byrow=TRUE))*(f.ij^2) ) /
(n1+n2)
By<-( matrix(rep(h,K+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,K+1),ncol=J+1,byrow=TRUE))*(g.kj^2) ) /
(n1+n2)
#Term C
Cx<-( f.ij*(1-f.ij)*matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)) ) /
( ((n1+1)*matrix(rep(h.x,I+1),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
Cy<-( g.kj*(1-g.kj)*matrix(rep(h,K+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,K+1),ncol=J+1,byrow=TRUE)) ) /
( ((n2+1)*matrix(rep(h.y,K+1),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
# The object hjj that follows is a (J+1)x(J+1) matrix which contains all crossed products
hjj<-h%*%t(h)
fjj<-list()
for(i in 1:(I+1)){
fjj[[i]]<-f.ij[i,]%*%t(f.ij[i,])
}
gjj<-list()
for(k in 1:(K+1)){
gjj[[k]]<-g.kj[k,]%*%t(g.kj[k,])
}
fjjp<-list()
for(i in 1:(I+1)){
fjjp[[i]]<- ( f.ij[i,]%*%t(f.ij[i,]) )*hjj
}
# similar for g
gjjp<-list()
for(k in 1:(K+1)){
gjjp[[k]]<- ( g.kj[k,]%*%t(g.kj[k,]) )*hjj
}
# hjjp contains the product of h(j)h(j') when j!= j'
hjjp<-hjj[lower.tri(hjj,diag=FALSE)]
# D term for all i and j
Dx<-matrix(0,nrow=(I+1),ncol=(J+1))
for(i in 1:(I+1)){
for(j in 1:(J+1)){
Dx[i,j]<- sum( ( fjjp[[i]][j,] / (n1+n2) )[-j] )
}
}
Dy<-matrix(0,nrow=(K+1),ncol=(J+1))
for(k in 1:(K+1)){
for(j in 1:(J+1)){
Dy[k,j]<- sum( ( gjjp[[k]][j,] / (n1+n2) )[-j] )
}
}
Var.fi<-apply(Ax+Bx+Cx,1,sum)-apply(Dx,1,sum)
Var.gk<-apply(Ay+By+Cy,1,sum)-apply(Dy,1,sum)
fii<-list()
for(j in 1:(J+1)){
fii[[j]]<-f.ij[,j]%*%t(f.ij[,j])
}
gkk<-list()
for(j in 1:(J+1)){
gkk[[j]]<-g.kj[,j]%*%t(g.kj[,j])
}
# fiip contains the product of f(i|j)f(i'|j) when i!= i', for i=1,...,I+1
ndx<-((I+1)*I)/2
fiip <- matrix(0,ncol=(J+1),nrow=ndx)
for(j in 1:(J+1)){
fiip[,j] <- fii[[j]][lower.tri(fii[[j]],diag=FALSE)]
}
ndy<-((K+1)*K)/2
gkkp <- matrix(0,ncol=(J+1),nrow=ndy)
for(j in 1:(J+1)){
gkkp[,j] <- gkk[[j]][lower.tri(gkk[[j]],diag=FALSE)]
}
A2x <- ( matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndx),ncol=J+1,byrow=TRUE))*(fiip) ) /
(n1+n2)
B2x <- fiip*matrix(rep(h^2,ndx),ncol=J+1,byrow=TRUE) / ((n1+1)*matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)-1)
C2x <- ( (fiip)*matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)) ) /
( ((n1+1)*matrix(rep(h,ndx),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
A2y <- ( matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndy),ncol=J+1,byrow=TRUE))*(gkkp) ) /
(n1+n2)
B2y <- gkkp*matrix(rep(h^2,ndy),ncol=J+1,byrow=TRUE) / ((n1+1)*matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)-1)
C2y <- ( (gkkp)*matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)) ) /
( ((n1+1)*matrix(rep(h,ndy),ncol=J+1,byrow=TRUE)-1)*(n1+n2) )
# the fipjp list that follows contains (I+1)I/2 (J+1)x(J+1) matrices each containing f(i|j)f(i'|j')
fipjp<-list()
for(i in 1:ndx){
fipjp[[i]]<- ( fiip[i,]%*%t(fiip[i,]) ) * hjj
}
gkpjp<-list()
for(k in 1:ndy){
gkpjp[[k]]<- ( gkkp[k,]%*%t(gkkp[k,]) ) * hjj
}
D2x<-matrix(0,nrow=(I+1),ncol=(J+1))
for(i in 1:(I+1)){
for(j in 1:(J+1)){
D2x[i,j]<- sum( ( fipjp[[i]][j,] / (n1+n2) )[-j] )
}
}
D2y<-matrix(0,nrow=(K+1),ncol=(J+1))
for(k in 1:(K+1)){
for(j in 1:(J+1)){
D2y[k,j]<- sum( ( gkpjp[[k]][j,] / (n1+n2) )[-j] )
}
}
cov.fi<-apply(A2x-B2x-C2x,1,sum)-apply(D2x,1,sum)
cov.gk<-apply(A2y-B2y-C2y,1,sum)-apply(D2y,1,sum)
f.x<-as.vector(table(factor(xs,levels=0:I)))/n1
x<-0:I
mean.x <- sum(x * f.x)
var.x <- sum(f.x*(x - mean.x)^2)
h_x <- 2
a.x <- sqrt( var.x^2/(var.x^2+h_x^2) )
library(kequate)
gaussian.EG <- kequate(design = "EG", x = 0:36, y = 0:36,
r = fi, s = gk, N=n1, M=n2, hx = 2, hy = 2, smoothed = FALSE)
xi <- gaussian.EG@equating$eqYx
fi<-apply(f.ij*matrix(rep(h,nrow(f.ij)),ncol=ncol(f.ij),byrow=TRUE),1,sum)
gk<-apply(g.kj*matrix(rep(h,nrow(g.kj)),ncol=ncol(g.kj),byrow=TRUE),1,sum)
mean.xi <- sum(xi*fi)
var.xi <- sum(fi*(xi - mean.xi)^2) # Using f.x and not g.y, is that correct?
h_y <- 2
a.xi <- sqrt( var.xi^2/(var.xi^2+h_y^2) )
var.comp1xi <- vector()
for(k in 1:(K+1)){
var.comp1xi[k] <- sum( pnorm((xi[k] - a.xi*(0:K)-(1-a.xi)*mean.xi)/(a.xi*h_y))^2 * Var.gk )# Note that Var.gk remains the same
}
aux.xi<-list()
for(k in 1:(K+1)){
aux.xi[[k]]<-pnorm((xi[k] - a.xi*(0:K)-(1-a.xi)*mean.xi)/(a.xi*h_y)) %*%
t(pnorm((xi[k] - a.xi*(0:K)-(1-a.xi)*mean.xi)/(a.xi*h_y)))
}
var.comp2xi<-vector()
for(k in 1:(K+1)){
var.comp2xi[k]<-sum( aux.xi[[k]][lower.tri(aux.xi[[k]])] * cov.gk ) # Note that cov.gk remains the same
}
# Putting everything together:
var.G<-var.comp1xi+var.comp2xi
var.comp1X <- vector()
for(i in 1:(I+1)){
var.comp1X[i] <- sum( (pnorm((x[i] - a.x*(0:I)-(1-a.x)*mean.x)/(a.x*h_x))^2) * Var.fi )
}
aux.x<-list()
for(i in 1:(I+1)){
aux.x[[i]]<-pnorm(((i-1) - a.x*(0:I)-(1-a.x)*mean.x)/(a.x*h_x)) %*% t(pnorm(((i-1) - a.x*(0:I)-(1-a.x)*mean.x)/(a.x*h_x)))
}
var.comp2X<-vector()
for(i in 1:(I+1)){
var.comp2X[i]<-sum( aux.x[[i]][lower.tri(aux.x[[i]])] * cov.fi )
}
# Putting everything together:
var.F<-var.comp1X+var.comp2X
Acov <- ( matrix(rep(h,I+1),ncol=J+1,byrow=TRUE)*(1-matrix(rep(h,I+1),ncol=J+1,byrow=TRUE))*(f.ij * g.kj) ) /
(n1+n2)
apply(Acov,1,sum)
#------------------------------------------------------------------------#
# fjgjp contains in its columns the product of f(i|j)g(k|j') when j!= j',
# for i=0,...,I+1
fjgjp<-matrix(0,ncol=(I+1),nrow=length(hjjp))
for(i in 1:(I+1)){
fjgjp[,i]<-fjj[[i]][lower.tri(gjj[[k]],diag=FALSE)]
}
#####################
B.cov<-c()
for(i in 1:(I+1)){
B.cov[i]<-sum((hjjp*fjgjp[,i])/(n1+n2))
}
# Covariance of F and G:
covFG <- vector()
for(i in 1:(I+1)){
for(k in 1:I+1){
covFG[i] <- sum( pnorm((x[i] - a.x*(0:I)-(1-a.x)*mean.x)/(a.x*h_x)) ) *
sum( pnorm((xi[k] - a.xi*(0:K)-(1-a.xi)*mean.xi)/(a.xi*h_y)) *
apply(Acov,1,sum) - B.cov)
}
}
plot((var.comp1X + var.comp2X) + (var.comp1xi + var.comp2xi) - 2*covFG)
plot((var.comp1X + var.comp2X) + (var.comp1xi + var.comp2xi) + 2*covFG)
(var.comp1X + var.comp2X)
(var.comp1xi + var.comp2xi)
plot((var.comp1xi + var.comp2xi))
plot((var.comp1X + var.comp2X))
# density of G evaluated at xi:
densityeqscores <- function(r, h, var, mean, eqx, x){
res<-numeric(length(eqx))
h <- as.vector(h)
a<-as.vector(sqrt(var/(var+h^2)))
x <- as.vector(x)
mean <- as.vector(mean)
for(i in 1:length(eqx)){
ff<-0
ff <- sum(r*dnorm((eqx[i]-a*x-(1-a)*mean)/(a*h))/(a*h) )
res[i]<-ff
}
return(res)
}
#gprime.xi <- densityeqscores(r = g.y, h = 2, var = var.xi, mean = mean.xi, eqx = 0:36, x = 0:36)
gprime.xi <- densityeqscores(r = gk, h = 2, var = var.xi, mean = mean.xi, eqx = xi, x = 0:36)
var.F
covFG
see<-sqrt((var.F+var.G-2*covFG))/gprime.xi
plot(see)
see
(var.F+var.G-2*covFG)
see<-sqrt((var.F+var.G+2*covFG))/gprime.xi
plot(see)
see
var.F
plot(var.F)
plot(var.G)
plot(cov.FG)
plot(covFG)
